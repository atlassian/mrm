 ~~
 ~~ Copyright 2011 Stephen Connolly
 ~~
 ~~ Licensed under the Apache License, Version 2.0 (the "License");
 ~~ you may not use this file except in compliance with the License.
 ~~ You may obtain a copy of the License at
 ~~
 ~~     http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing, software
 ~~ distributed under the License is distributed on an "AS IS" BASIS,
 ~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~~ See the License for the specific language governing permissions and
 ~~ limitations under the License.
 ~~

 ------
 Using with Maven Invoker
 ------
 Stephen Connolly
 ------
 2011-11-22
 ------

Using with Maven Invoker

  The aim here is to combine the usage of the <<<mrm-maven-plugin>>> with the <<<maven-invoker-plugin>>> to
  allow the integration tests of a Maven Plugin to be run against a test local repository thereby ensuring that
  the plugin does not get installed into the local repository until after the integration tests have been confirmed
  as passing.

  First we need to modify the <<<pom.xml>>> to reference both <<<mrm-maven-plugin>>> and the
  <<<maven-invoker-plugin>>>

---
<project>
  ...
  <build>
    ...
    <plugins>
      ...
      <plugin>
        <artifactId>maven-invoker-plugin</artifactId>
        <version>1.5</version>
        <executions>
          <execution>
            <goals>
              <goal>install</goal>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          ...
          <localRepositoryPath>\${project.build.directory}/local-repo</localRepositoryPath>
          <settingsFile>src/mrm/settings.xml</settingsFile>
          <filterProperties>
            <repository.proxy.url>${repository.proxy.url}</repository.proxy.url>
          </filterProperties>
          ...
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>mrm-maven-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>start</goal>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <propertyName>repository.proxy.url</propertyName>
          <repositories>
            <mockRepo>
              <source>src/mrm/repository</source>
            </mockRepo>
            <proxyRepo/>
          </repositories>
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>
---

  This will result in the following mojos being executed during the lifecycle as follows:

*-----------------------+---------------------------------+
| <<Phase>>             | <<Goal(s)>>                     |
*-----------------------+---------------------------------+
| pre-integration-test  | mrm:start, invoker:install      |
*-----------------------+---------------------------------+
| integration-test      | invoker:integration-test        |
*-----------------------+---------------------------------+
| post-integration-test | mrm:stop                        |
*-----------------------+---------------------------------+
| verify                | invoker:verify                  |
*-----------------------+---------------------------------+

  Additionally, when <<<mrm:start>>> is invoked, it will bind to an available port and set the property
  <<<repository.proxy.url>>> to the URL on which the repository is being hosted, and the repository content
  will be the union of the mock content generated from all the <<<**/*.pom>>> files in <<<src/mrm/repository>>>
  and all the repositories available to the current Maven instance.

  We tell <<<maven-invoker-plugin>>> to use the <<<settings.xml>>> file from <<<src/mrm/settings.xml>>>
  which will look something like:

---
<?xml version="1.0" encoding="UTF-8"?>
<settings>
  <mirrors>
    <mirror>
      <id>mrm-maven-plugin</id>
      <name>Mock Repository Manager</name>
      <url>@repository.proxy.url@</url>
      <mirrorOf>*</mirrorOf>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>it-repo</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <repositories>
        <repository>
          <id>snapshots</id>
          <url>@repository.proxy.url@</url>
          <releases>
            <enabled>true</enabled>
            <checksumPolicy>ignore</checksumPolicy>
            <updatePolicy>never</updatePolicy>
          </releases>
          <snapshots>
            <enabled>true</enabled>
            <checksumPolicy>ignore</checksumPolicy>
            <updatePolicy>always</updatePolicy>
          </snapshots>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>snapshots</id>
          <url>@repository.proxy.url@</url>
          <releases>
            <enabled>true</enabled>
            <checksumPolicy>ignore</checksumPolicy>
            <updatePolicy>never</updatePolicy>
          </releases>
          <snapshots>
            <enabled>true</enabled>
            <checksumPolicy>ignore</checksumPolicy>
            <updatePolicy>always</updatePolicy>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
</settings>
---

  And we also have instructed the <<<maven-invoker-plugin>>> to filter in the property value <<<repository.proxy.url>>>
  Thus when the integration tests run, they will use the mock repository manager that we have provisioned.
